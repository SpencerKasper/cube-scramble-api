AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  LambdaWithDynamoDBFullAccessRoleArn:
    Type: String
    Default: arn:aws:iam::771384749710:role/LambdaWithDynamoDBFullAccess
  CurrentNodeModulesLayerVersion:
    Type: String
    Default: arn:aws:lambda:us-east-1:771384749710:layer:cube-scramble-api-layer:1
Resources:
  GetSessions:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: GetSessions
      Code: ./built
      Layers: [ !Ref CurrentNodeModulesLayerVersion ]
      Handler: "getSessionsLambdaHandler.handler"
      Runtime: "nodejs12.x"
      Role: !Ref LambdaWithDynamoDBFullAccessRoleArn
      Timeout: 60
  CreateSession:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: CreateSession
      Code: ./built
      Layers: [ !Ref CurrentNodeModulesLayerVersion ]
      Handler: "createSessionLambdaHandler.handler"
      Runtime: "nodejs12.x"
      Role: !Ref LambdaWithDynamoDBFullAccessRoleArn
      Timeout: 60
  SolveLogSessionApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      ApiKeySourceType: HEADER
      Description: Session API for saving Rubik's Cube solves.
      Name: solve-log-session-api
  SessionsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt SolveLogSessionApi.RootResourceId
      PathPart: 'sessions'
      RestApiId: !Ref SolveLogSessionApi
  ApiGatewayModel:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: 'application/json'
      RestApiId: !Ref SolveLogSessionApi
      Schema: { }
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: GetSessionsGatewayMethod
    Properties:
      Description: Cube Scramble API Deployment
      RestApiId: !Ref SolveLogSessionApi
  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiGatewayDeployment
      Description: Prod API Stage
      RestApiId: !Ref SolveLogSessionApi
      StageName: prod
  ApiGatewayIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: 'Allow'
            Principal:
              Service:
                - 'apigateway.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
  ApiGatewayPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "LambdaAccess"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: 'Allow'
            Action: 'lambda:*'
            Resource: !GetAtt GetSessions.Arn
          - Effect: 'Allow'
            Action: 'lambda:*'
            Resource: !GetAtt CreateSession.Arn
      Roles:
        - !Ref ApiGatewayIamRole
  LambdaApiGatewayInvoke:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "GetSessions.Arn"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SolveLogSessionApi}/*/*
  LambdaApiGatewayInvokeCreateSession:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "CreateSession.Arn"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SolveLogSessionApi}/*/*
  GetSessionsGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      RequestParameters:
        method.request.querystring.userId: true
      Integration:
        Credentials: !GetAtt ApiGatewayIamRole.Arn
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - ResponseTemplates: { "application/json": "" }
            ResponseParameters:
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            StatusCode: 200
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates:
          application/json: "{\"userId\": \"$input.params('userId')\"}"
        TimeoutInMillis: 29000
        Type: AWS
        Uri: !Sub
          - 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations'
          - lambdaArn: !GetAtt "GetSessions.Arn"
      MethodResponses:
        - ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.X-Requested-With: false
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: '*'
          StatusCode: 200
      OperationName: 'Get Sessions'
      ResourceId: !Ref SessionsResource
      RestApiId: !Ref SolveLogSessionApi
  CreateSessionGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      RequestParameters:
        method.request.header.body: true
      Integration:
        Credentials: !GetAtt ApiGatewayIamRole.Arn
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - ResponseTemplates: { "application/json": "" }
            ResponseParameters:
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            StatusCode: 200
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates:
          application/json: "{ \"body\": $input.json('$')}"
        TimeoutInMillis: 29000
        Type: AWS
        Uri: !Sub
          - 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations'
          - lambdaArn: !GetAtt "CreateSession.Arn"
      MethodResponses:
        - ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.X-Requested-With: false
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
          StatusCode: 200
      OperationName: 'Save session'
      ResourceId: !Ref SessionsResource
      RestApiId: !Ref SolveLogSessionApi
  SessionOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId:
        Ref: SolveLogSessionApi
      ResourceId:
        Ref: SessionsResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
Outputs:
  MainEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${SolveLogSessionApi}.execute-api.${AWS::Region}.amazonaws.com/${ApiGatewayStage}/"
